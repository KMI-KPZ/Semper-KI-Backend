from pathlib import Path
import os
import sys
from dotenv import load_dotenv, find_dotenv
from session_cleanup.settings import weekly_schedule
import threading
from backend_django.helper.classes import SemperKiConfigHelper

"""
Part of Semper-KI software

Generated by 'django-admin startproject' using Django 4.1.3., modified by Silvio Weging 2023

Contains: Django settings for backend_django project.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

class BackendDjangoConfigHelper(SemperKiConfigHelper):
    name = 'backend_django'
    dbs = ('default',)
    # required env vars

    env_vars_external = {
        # AUTH0
        'AUTH0_DOMAIN': {'var': 'AUTH0_DOMAIN',
                         'hint': 'Auth0 domain as endpoint for authentication services for semper-ki', 'default': None,
                         'required': True},
        'AUTH0_CLIENT_ID': {'var': 'AUTH0_CLIENT_ID',
                            'hint': 'Auth0 client id for authentication services for single users', 'default': None,
                            'required': True},
        'AUTH0_CLIENT_SECRET': {'var': 'AUTH0_CLIENT_SECRET',
                                'hint': 'Auth0 client secret for authentication services for single users',
                                'default': None, 'required': True},
        'AUTH0_ORGA_CLIENT_ID': {'var': 'AUTH0_ORGA_CLIENT_ID',
                                 'hint': 'Auth0 client id for authentication services for organizations',
                                 'default': None, 'required': True},
        'AUTH0_ORGA_CLIENT_SECRET': {'var': 'AUTH0_ORGA_CLIENT_SECRET',
                                     'hint': 'Auth0 client secret for authentication services for organizations',
                                     'default': None, 'required': True},
        'AUTH0_API_CLIENT_ID': {'var': 'AUTH0_API_CLIENT_ID',
                                'hint': 'Auth0 client id for authentication services for management via m2m calls',
                                'default': None, 'required': True},
        'AUTH0_API_CLIENT_SECRET': {'var': 'AUTH0_API_CLIENT_SECRET',
                                    'hint': 'Auth0 client secret for authentication services for management via m2m calls',
                                    'default': None, 'required': True},
        # SPARQL
        'SPARQLUSERNAME': {'var': 'SPARQL_USERNAME', 'hint': 'Sparql username for querying the triple store',
                           'default': None, 'required': True},
        'SPARQLPW': {'var': 'SPARQL_PASSWORD', 'hint': 'Sparql password for querying the triple store', 'default': None,
                     'required': True},

        # CMEM
        'CMEMCLIENTID': {'var': 'CMEM_CLIENT_ID',
                         'hint': 'CMEM client id for authentication services for management via m2m calls',
                         'default': None, 'required': True},
        'CMEMCLIENTSECRET': {'var': 'CMEM_CLIENT_SECRET',
                             'hint': 'CMEM client secret for authentication services for management via m2m calls',
                             'default': None, 'required': True},

        'COYPUCLIENTID': {'var': 'COYPU_CLIENTID',
                          'hint': 'COYPU client id for authentication services for management via m2m calls',
                          'default': None, 'required': True},
        'COYPUPASSWORD': {'var': 'COYPU_PASSWORD',
                          'hint': 'COYPU password for authentication services for management via m2m calls',
                          'default': None, 'required': True},
        'AWS_ACCESS_KEY_ID': {'var': 'AWS_ACCESS_KEY_ID', 'hint': 'Key ID of the AWS Space', 'default': None, 'required': True},
        'AWS_SECRET_ACCESS_KEY': {'var': 'AWS_SECRET_ACCESS_KEY', 'hint': 'Secret of the AWS Space', 'default': None, 'required': True},
        'AWS_REGION_NAME': {'var': 'AWS_REGION_NAME', 'hint': 'Region of the chosen server', 'default': None, 'required': True},
        'AWS_BUCKET_NAME': {'var': 'AWS_BUCKET_NAME', 'hint': 'The primary bucket which contains private files', 'default': None, 'required': True},
        'AWS_STATICS_BUCKET_NAME': {'var': 'AWS_STATICS_BUCKET_NAME', 'hint': 'Bucket for public files', 'default': None, 'required': True},
        'AWS_S3_ENDPOINT_URL': {'var': 'AWS_S3_ENDPOINT_URL', 'hint': 'Domain of the provider without https:// and region', 'default': '', 'required': True},
        'AWS_CDN_ENDPOINT': {'var': 'AWS_CDN_ENDPOINT', 'hint': 'Same as domain, except for cdn. before the domain', 'default': None, 'required': True},
        'AWS_LOCATION': {'var': 'AWS_LOCATION', 'hint': 'Usually the same as the bucket name but can be different', 'default': None, 'required': True},
        'AWS_STATICS_LOCATION': {'var': 'AWS_STATICS_LOCATION', 'hint': 'Same but for the statics folder', 'default': None, 'required': True},
    }

    env_vars_internal = {
        'DJANGO_SECRET': {'var': 'SECRET_KEY', 'hint': 'Django secret key used for hashing and encryption',
                          'default': '1234567890', 'required': True},

        # Postgres PW
        'POSTGRES_PASSWORD': {'var': 'POSTGRES_PASSWORD', 'hint': 'Postgres password for database - default is used for docker-dev-environment', 'default': "pg_pw",
                              'required': True
                              },
        'POSTGRES_HOST': {'var': 'POSTGRES_HOST', 'hint': 'Postgres host for database', 'default': 'db-dev-local',
                          'required': True},
        'POSTGRES_PORT': {'var': 'POSTGRES_PORT', 'hint': 'Postgres port for database', 'default': '5432',
                          'required': True},
        'POSTGRES_NAME': {'var': 'POSTGRES_NAME', 'hint': 'Postgres database for database', 'default': 'semperki_dev',
                          'required': True},
        'POSTGRES_USER': {'var': 'POSTGRES_USER', 'hint': 'Postgres username for database', 'default': 'postgres',
                          'required': True},

        # REDIS
        'REDIS_HOST': {'var': 'REDIS_HOST', 'hint': 'Redis host for caching', 'default': 'files',
                       'required': False},
        'REDIS_PORT': {'var': 'REDIS_PORT', 'hint': 'Redis port for caching', 'default': '6379', 'required': False},
        'REDISPW': {'var': 'REDIS_PASSWORD', 'hint': 'Redis database for caching', 'default': "redis_pw", 'required': True},
        #'CELERY_BROKER_URL': {'var': 'CELERY_BROKER_URL', 'default': "redis://:redis_pw@host.docker.internal:6379/0",
        #                    'hint': 'Celery broker url for checking msg queue?', 'required': True},
        #'CELERY_RESULT_BACKEND' : {'var': 'CELERY_RESULT_BACKEND', 'default': "redis://:redis_pw@host.docker.internal:6379/0",
        #                    'hint': 'Celery result backend?', 'required': True},

        # Allowed hosts
        'LOCALSTACK_ENDPOINT': {'var': 'LOCALSTACK_ENDPOINT', 'hint': 'Adress of the local AWS storage', 'default': 'http://host.docker.internal:4566', 'required': True},
        'LOCALSTACK_ACCESS_KEY': {'var': 'LOCALSTACK_ACCESS_KEY', 'hint': 'AWS equivalent of user name, can be anything', 'default': 'test','required': True},
        'LOCALSTACK_SECRET': {'var': 'LOCALSTACK_SECRET', 'hint': 'AWS equivalent of password, can be anything', 'default': 'test','required': True},
        'AES_ENCRYPTION_KEY': {'var': 'AES_ENCRYPTION_KEY', 'hint': 'AES Key generated for encryption as base64 encoded string', 'default': None, 'required': True},
        'ALLOWED_HOSTS': {'var': 'ALLOWED_HOSTS', 'hint': 'Allowed hosts for the backend API calls, comma separated',
                          'type': 'list',
                          'default': 'localhost,dev.semper-ki.org,semper-ki.org,www.semper-ki.org,https://dev.semper-ki.org', 'required': False},
        'ENV_TOKEN': {'var': 'ENV_TOKEN', 'hint': 'A token with which you can check which env is used',
                   'default': 'DEFAULT_ENV', 'required': False},

    }

    def __init__(self):
        self.env_vars = {**self.env_vars_external, **self.env_vars_internal}
        super().__init__()

    def configure_database(self, module):
        print('************* configuring database: thread: ' + str(threading.current_thread().ident) + ' *************')
        setattr(module, 'DATABASES', {

            'default': {
                "ENGINE": "django.db.backends.postgresql_psycopg2",
                "NAME": module.POSTGRES_NAME,
                "USER": module.POSTGRES_USER,
                "PASSWORD": module.POSTGRES_PASSWORD,
                "HOST": module.POSTGRES_HOST,
                "PORT": module.POSTGRES_PORT,
            }
        })
        print(str(module.DATABASES))


print("hier sind die base settings")
# Load environment definition file

print(f'###########{os.environ.get("ENV_FILE")} ###########')
file_base = os.environ.get("ENV_FILE")
if file_base is None:
    file_base = ".env"
    ENV_FILE = find_dotenv(filename=os.environ.get("ENV_FILE",file_base))
else:
    ENV_FILE = find_dotenv(filename=os.environ.get("ENV_FILE"))

print(f'###########{ENV_FILE} mode: {os.environ.get("ENV_FILE", ".env")} ###########')

if ENV_FILE:
    print(f'Loading environment variables from {ENV_FILE}')
    load_dotenv(ENV_FILE)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

TEMPLATE_DIR = os.path.join(BASE_DIR, "backend_django", "templates")
DOC_DIR = os.path.join(BASE_DIR, 'doc', 'build', 'html')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ.get("DJANGO_SECRET")
PRODUCTION = False
DEVELOPMENT = False
DEBUG = True

BACKEND_SETTINGS = "base"

# ALLOWED_HOSTS = ['localhost', '127.0.0.1', "dev.semper-ki.org", "semper-ki.org", "www.semper-ki.org", "https://dev.semper-ki.org", "https://semper-ki.org", "https://www.semper-ki.org", "backend.semper-ki.org", "https://backend.semper-ki.org", "dev-backend.semper-ki.org", "https://dev-backend.semper-ki.org"]

CSRF_TRUSTED_ORIGINS = ["http://localhost:3000", "http://127.0.0.1:3000", "http://localhost:8000",
                        "http://127.0.0.1:8000", "https://localhost:3000", "https://127.0.0.1:3000",
                        "https://localhost:8000", "https://127.0.0.1:8000", "https://dev.semper-ki.org",
                        "https://semper-ki.org", "https://www.semper-ki.org", "https://backend.semper-ki.org",
                        "https://dev-backend.semper-ki.org"]

CORS_ALLOWED_ORIGINS = ["http://localhost:3000", "http://127.0.0.1:3000", "http://localhost:8000",
                        "http://127.0.0.1:8000", "https://localhost:3000", "https://127.0.0.1:3000",
                        "https://localhost:8000", "https://127.0.0.1:8000", 'https://dev-bdt24c5k0meleovv.eu.auth0.com',
                        "https://dev.semper-ki.org", "https://semper-ki.org", "https://www.semper-ki.org",
                        "https://backend.semper-ki.org", "https://dev-backend.semper-ki.org"]
CORS_ORIGIN_WHITELIST = ['http://localhost:3000', 'http://localhost:8000', 'http://127.0.0.1:3000',
                         'http://127.0.0.1:8000', 'https://dev-bdt24c5k0meleovv.eu.auth0.com',
                         "https://dev.semper-ki.org", "https://semper-ki.org", "https://www.semper-ki.org",
                         "https://backend.semper-ki.org", "https://dev-backend.semper-ki.org"]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = (
    'content-type',
    'accept',
    'X-CSRFToken',
    'Access-Control-Allow-Origin',
    'Access-Control-Allow-Headers',
    'Authorization',
    'Usertype',
    'Path',
    'Register'
)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'uvicorn',
    'channels',
    'corsheaders',
    # 'backend_django.apps.BackendDjangoConfig',
    'backend_django',
    'session_cleanup',
    'storages'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR, DOC_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [("127.0.0.1", 6379)],
#         },
#     },
# }

# SSL
# SECURE_SSL_REDIRECT = False # Redirects http to https
SESSION_COOKIE_SECURE = True  # Sets session cookies as secure
CSRF_COOKIE_SECURE = True  # Sets csrf cookie as secure
SESSION_COOKIE_HTTPONLY = True
# CSRF_COOKIE_DOMAIN = '127.0.0.1' 


CONN_MAX_AGE = 10  # Seconds for which the database connection is enabled. 0 is for close after every request

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Load Auth0 application settings into memory
# AUTH0_DOMAIN = os.environ.get("AUTH0_DOMAIN")
# AUTH0_CLIENT_ID = os.environ.get("AUTH0_CLIENT_ID")
# AUTH0_CLIENT_SECRET = os.environ.get("AUTH0_CLIENT_SECRET")
# AUTH0_ORGA_CLIENT_ID = os.environ.get("AUTH0_ORGA_CLIENT_ID")
# AUTH0_ORGA_CLIENT_SECRET = os.environ.get("AUTH0_ORGA_CLIENT_SECRET")
# AUTH0_API_CLIENT_ID = os.environ.get("AUTH0_API_CLIENT_ID")
# AUTH0_API_CLIENT_SECRET = os.environ.get("AUTH0_API_CLIENT_SECRET")

# REDIS
# REDIS_HOST = "host.docker.internal"
# REDIS_PORT = 6379
# REDIS_PASSWORD = os.environ.get("REDISPW")
FILE_UPLOAD_MAX_MEMORY_SIZE = 100 * 1024 * 1024

# SPARQL
# SPARQL_USERNAME = os.environ.get("SPARQLUSERNAME")
# SPARQL_PASSWORD = os.environ.get("SPARQLPW")
# CMEM_CLIENT_ID = os.environ.get("CMEMCLIENTID")
# CMEM_CLIENT_SECRET = os.environ.get("CMEMCLIENTSECRET")

# Session cleanup
CELERYBEAT_SCHEDULE = {
    'session_cleanup': weekly_schedule
}

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'detailed': {
            'format': '{levelname} [{asctime}]{name} :  {message}',
            'style': '{',
        },
    },
    'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'detailed'
            },
            'file': {
                'level': 'INFO',
                'class': 'logging.FileHandler',
                'filename': "logs/info.log",
            },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'propagate': False,
            'level': 'DEBUG',
        },
        'logToFile': { # the logger used in every handler, needs to be called manually
            'handlers': ['file','console'],
            'propagate': False,
            'level': 'INFO',
        },
        'django': {
            'handlers': ['console'],
            'propagate': False,
            'level': 'INFO',
        },
        # django.template and django.backends must not use DEBUG-level, since it is buggy
        'django.template': {
            'propagate': True,
            'level': 'INFO',
        },
        'django.db.backends': {
            'propagate': True,
            'level': 'INFO',
        },
        # use same format for logs from uvicorn
        'uvicorn': {
            'handlers': ['console'],
            'propagate': False,
            'level': 'INFO',
        },
    }
}

# Session
SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"

# Callers
WSGI_APPLICATION = 'backend_django.wsgi.application'
ASGI_APPLICATION = "backend_django.asgi.application"

settings_helper = BackendDjangoConfigHelper()
settings_helper.loadEnvVars(sys.modules[__name__])
settings_helper.configure_database(sys.modules[__name__])

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STORAGES = {
    "default":{
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
            "bucket_name": AWS_BUCKET_NAME,
            "object_parameters": {'CacheControl': 'max-age=86400'},
            "default_acl": "private",
            "location": AWS_LOCATION,
            "region_name": AWS_REGION_NAME,
            "endpoint_url": "https://"+AWS_REGION_NAME+AWS_S3_ENDPOINT_URL
        }
    },
    "staticfiles": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
            "bucket_name": AWS_STATICS_BUCKET_NAME,
            "object_parameters": {'CacheControl': 'max-age=86400'},
            "default_acl": "public-read",
            "location": AWS_STATICS_LOCATION,
            "region_name": AWS_REGION_NAME,
            "endpoint_url": "https://"+AWS_REGION_NAME+"."+AWS_S3_ENDPOINT_URL
        }
    }
}


STATIC_URL = f"https://{AWS_STATICS_BUCKET_NAME}.{AWS_REGION_NAME}.{AWS_CDN_ENDPOINT}/{AWS_STATICS_LOCATION}/public/"
MEDIA_URL = f"https://{AWS_STATICS_BUCKET_NAME}.{AWS_REGION_NAME}.{AWS_CDN_ENDPOINT}/{AWS_STATICS_LOCATION}/public/media/"