code_General.utilities.basics
=============================

.. py:module:: code_General.utilities.basics

.. autoapi-nested-parse::

   Generic Backend

   Silvio Weging 2023

   Contains: Basic stuff that is imported everywhere



Classes
-------

.. autoapisummary::

   code_General.utilities.basics.ExceptionSerializerGeneric
   code_General.utilities.basics.VersioningForHandlers


Functions
---------

.. autoapisummary::

   code_General.utilities.basics.checkIfTokenValid
   code_General.utilities.basics.manualCheckifLoggedIn
   code_General.utilities.basics.manualCheckifAdmin
   code_General.utilities.basics.checkIfUserIsLoggedIn
   code_General.utilities.basics.checkIfUserIsAdmin
   code_General.utilities.basics.handleTooManyRequestsError
   code_General.utilities.basics.manualCheckIfRightsAreSufficient
   code_General.utilities.basics.manualCheckIfRightsAreSufficientForSpecificOperation
   code_General.utilities.basics.checkIfRightsAreSufficient
   code_General.utilities.basics.findFirstOccurence
   code_General.utilities.basics.checkIfNestedKeyExists
   code_General.utilities.basics.getNestedValue
   code_General.utilities.basics.checkVersion


Module Contents
---------------

.. py:function:: checkIfTokenValid(token)

   Check whether the token of a user has expired and a new login is necessary

   :param token: User session token
   :type token: Dictionary
   :return: True if the token is valid or False if not
   :rtype: Bool


.. py:function:: manualCheckifLoggedIn(session)

   Check whether a user is logged in or not.

   :param session: Session of user
   :type session: dict
   :return: Response whether the user is logged in or not.
   :rtype: Bool


.. py:function:: manualCheckifAdmin(session)

   Check whether a user is an admin or not.

   :param session: Session of user
   :type session: dict
   :return: Response whether the user is an admin or not.
   :rtype: Bool


.. py:function:: checkIfUserIsLoggedIn(json=False)

   Check whether a user is logged in or not.

   :param json: Controls if the output is in JSON Format or not
   :type json: Bool
   :return: Response whether the user is logged in or not. If so, call the function.
   :rtype: HTTPRespone/JSONResponse, Func


.. py:function:: checkIfUserIsAdmin(json=False)

   Check whether the current user is an admin or not

   :param json: Controls if the output is in JSON Format or not
   :type json: Bool
   :return: Response whether the user is an admin or not. If so, call the function.
   :rtype: HTTPRespone/JSONResponse, Func


.. py:function:: handleTooManyRequestsError(callToAPI)

   Calls the function and checks, if there were too many requests. If so, repeat the request until it's done.
   :param callToAPI: Function call to Auth0 API
   :type callToAPI: Lambda func
   :return: Either an error, or the response
   :rtype: Exception | JSON/Dict


.. py:function:: manualCheckIfRightsAreSufficient(session, funcName)

   Check whether a user has the permissions to do something.

   :param session: Session of user
   :type session: dict
   :param funcName: The function that called this
   :type funcName: str
   :return: Response whether the user is logged in or not.
   :rtype: Bool


.. py:function:: manualCheckIfRightsAreSufficientForSpecificOperation(session, funcName, operation)

   Check whether a user has the permissions to do something.

   :param session: Session of user
   :type session: dict
   :param funcName: The function that called this
   :type funcName: str
   :return: Response whether the user is logged in or not.
   :rtype: Bool


.. py:function:: checkIfRightsAreSufficient(json=False)

   Check whether a user has sufficient rights to call that function.

   :param json: Controls if the output is in JSON Format or not
   :type json: Bool
   :return: Response if the rights were not sufficient, function call if they were.
   :rtype: HTTPRespone/JSONResponse, Func


.. py:function:: findFirstOccurence(iterable, default=False, pred=None)

   Returns the first true value in the iterable.

   If no true value is found, returns *default*

   If *pred* is not None, returns the first item
   for which pred(item) is true.

   :param iterable: The object (list, ...)
   :type iterable: iterable object
   :param default: The default returned, mostly None
   :type default: depends
   :param pred: A lambda function which an element of the list must fulfill
   :type pred: function
   :return: Element or default
   :rtype: depends



.. py:function:: checkIfNestedKeyExists(dictionary: dict, *keys) -> bool

   Check if nested keys exist in a dictionary.
   Equivalent to: if key1 in dictionary and key2 in dictionary[key1] and ...

   :param dictionary: The dictionary in question
   :type dictionary: dict
   :param keys: Key Parameters, must be in order
   :type keys: Any
   :return: True if all keys are in Dictionary
   :rtype: bool



.. py:function:: getNestedValue(dictionary: dict, *keys)

   Check if nested keys exist in a dictionary and return the final value.
   Equivalent to: if key1 in dictionary and key2 in dictionary[key1] and ... dictionary[key1][key2]...[keyN]

   :param dictionary: The dictionary in question
   :type dictionary: dict
   :param keys: Key Parameters, must be in order
   :type keys: Any
   :return: The last value if all keys are in Dictionary, None if not
   :rtype: Any | None



.. py:class:: ExceptionSerializerGeneric(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: message


   .. py:attribute:: exception


.. py:class:: VersioningForHandlers(allowedVersions)

   Bases: :py:obj:`rest_framework.versioning.AcceptHeaderVersioning`


   GET /something/ HTTP/1.1
   Host: example.com
   Accept: application/json; version=1.0


   .. py:attribute:: allowed_versions
      :value: ['0.3']



.. py:function:: checkVersion(version=0.3)

   Checks if the version is supported or not. If not, returns an error message.

   :param version: Version of the API to check if it is supported or not
   :type version: Float
   :return: Response whether the version is supported or not
   :rtype: HTTPRespone


