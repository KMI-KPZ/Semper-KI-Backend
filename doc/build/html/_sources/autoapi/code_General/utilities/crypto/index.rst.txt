:py:mod:`code_General.utilities.crypto`
=======================================

.. py:module:: code_General.utilities.crypto

.. autoapi-nested-parse::

   Part of Semper-KI software

   Silvio Weging 2023

   Contains: Services for cryptographics



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   code_General.utilities.crypto.generateMD5
   code_General.utilities.crypto.generateSecureID
   code_General.utilities.crypto.generateSalt
   code_General.utilities.crypto.generateNoncryptographicHash
   code_General.utilities.crypto.generateURLFriendlyRandomString
   code_General.utilities.crypto.generateAESKey
   code_General.utilities.crypto.encryptAES
   code_General.utilities.crypto.decryptAES



.. py:function:: generateMD5(someString) -> str

   Convert string to md5 hashed string

   :param someString: String that shall be hashed
   :type someString: string
   :return: string containing the md5 hash
   :rtype: string



.. py:function:: generateSecureID(someString) -> str

   Convert string to as secure as possible hashed string

   :param someString: String that shall be hashed
   :type someString: string
   :return: string containing the hash
   :rtype: string



.. py:function:: generateSalt(size=5) -> str

   Generate unique random salt string to be attached to another string before hashing

   :param size: Number of characters generated as salt
   :type size: int
   :return: string containing salt
   :rtype: string



.. py:function:: generateNoncryptographicHash(someString) -> str

   Convert string to hashed string

   :param someString: String that shall be hashed
   :type someString: string
   :return: string containing the hash
   :rtype: string



.. py:function:: generateURLFriendlyRandomString() -> str

   Generate random string

   :return: random string
   :rtype: string



.. py:function:: generateAESKey() -> str

   Generate a one time use AES Key

   :return: Key to be saved somewhere
   :rtype: string



.. py:function:: encryptAES(key: str, file: io.BytesIO) -> io.BytesIO

   Encrypt a file with a previously set key

   :param key: String containing the encryption key
   :type key: str
   :param file: The file to be encrypted
   :type file: BytesIO or inMemoryFile
   :return: Encrypted file
   :rtype: BytesIO



.. py:function:: decryptAES(key: str, file: io.BytesIO) -> io.BytesIO

   Decrypt a file with a previously set key

   :param key: String containing the encryption key
   :type key: str
   :param file: The file to be decrypted
   :type file: BytesIO or inMemoryFile
   :return: Decrypted file
   :rtype: BytesIO



