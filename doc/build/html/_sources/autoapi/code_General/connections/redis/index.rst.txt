code_General.connections.redis
==============================

.. py:module:: code_General.connections.redis

.. autoapi-nested-parse::

   Generic Backend

   Silvio Weging 2023

   Contains: Services for using the key-value store in redis



Attributes
----------

.. autoapisummary::

   code_General.connections.redis.logger


Classes
-------

.. autoapisummary::

   code_General.connections.redis.RedisConnection


Module Contents
---------------

.. py:data:: logger

.. py:class:: RedisConnection

   .. py:attribute:: redis_instance
      :value: ''



   .. py:method:: addContent(key, content, expire=False)

      Save a key and its content in redis.

      :param key: key, usually a session ID
      :type key: String
      :param content: The stuff that should be saved
      :type content: Differs, will be set to binary here
      :return: Either "true" if it worked or an error if not
      :rtype: Bool




   .. py:method:: addContentJSON(key, content, expire=True)

      Save a key and its content in redis.

      :param key: key, usually a session ID
      :type key: String
      :param content: The stuff that should be saved
      :type content: Differs, will be set to binary here
      :return: Either "true" if it worked or an error if not
      :rtype: Bool




   .. py:method:: deleteKey(key)

      Delete key and value from redis by key.

      :param key: key, usually a session ID
      :type key: String
      :return: flag to show if it worked or not
      :rtype: Bool




   .. py:method:: retrieveContent(key, deleteOrNot=False)

      Retrieve content from redis by key.
      WARNING: This is not secure! It would be better to use JSON

      :param key: key, usually a session ID
      :type key: String
      :param deleteOrNot: Decides if the key:content pair should be deleted after retrieval
      :type deleteOrNot: Bool
      :return: content
      :rtype: Differs, not binary




   .. py:method:: retrieveContentJSON(key, deleteOrNot=False)

      Retrieve content from redis by key.

      :param key: key, usually a session ID
      :type key: String
      :param deleteOrNot: Decides if the key:content pair should be deleted after retrieval
      :type deleteOrNot: Bool
      :return: content
      :rtype: Differs, not binary




