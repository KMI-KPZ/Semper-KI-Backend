code_General.connections.postgresql.pgAPIToken
==============================================

.. py:module:: code_General.connections.postgresql.pgAPIToken

.. autoapi-nested-parse::

   Generic Backend

   Silvio Weging 2024

   Contains: Calls to the API Token model



Attributes
----------

.. autoapisummary::

   code_General.connections.postgresql.pgAPIToken.logger


Functions
---------

.. autoapisummary::

   code_General.connections.postgresql.pgAPIToken.checkIfAPITokenExists
   code_General.connections.postgresql.pgAPIToken.createAPIToken
   code_General.connections.postgresql.pgAPIToken.checkAPITokenAndRetrieveUserObject
   code_General.connections.postgresql.pgAPIToken.deleteAPIToken


Module Contents
---------------

.. py:data:: logger

.. py:function:: checkIfAPITokenExists(session) -> str | Exception

   Checks if there already is a token and if so, return it

   :param session: The session
   :type sessioN: Dict-like
   :return: Token if it exists, empty string if not
   :rtype: str | Exception



.. py:function:: createAPIToken(session) -> str | Exception

   Generate an API Token for User/Organization if there is none yet

   :param session: The session
   :type sessioN: Dict-like
   :return: The token string or Exception
   :rtype: str | Exception



.. py:function:: checkAPITokenAndRetrieveUserObject(token: str)

   Check if API Token is legit and if so, return either the user or the orga

   :param token: The API token
   :type token: str
   :return: (False, None, False) if there is nothing, (False, User, False) if a user is associated with that token, else (True, Organization, False). The last one is only true if the user/orga is an admin.
   :rtype: (bool, None | User | Organization, bool)



.. py:function:: deleteAPIToken(token: str)

   Deletes the API token for that user/orga

   :param token: The API token
   :type token: str
   :return: None or Exception if it didn't work
   :rtype: None | Exception


