code_General.handlers.users
===========================

.. py:module:: code_General.handlers.users


Attributes
----------

.. autoapisummary::

   code_General.handlers.users.logger
   code_General.handlers.users.loggerError


Classes
-------

.. autoapisummary::

   code_General.handlers.users.SReqAddressContent
   code_General.handlers.users.SResStatistics
   code_General.handlers.users.SReqNotificationsContent
   code_General.handlers.users.SReqProfileClassesForNotifications
   code_General.handlers.users.SResUserDetails
   code_General.handlers.users.SResUserProfile
   code_General.handlers.users.SReqChanges
   code_General.handlers.users.SReqDeletions
   code_General.handlers.users.SReqUpdateUser


Functions
---------

.. autoapisummary::

   code_General.handlers.users.addUserTest
   code_General.handlers.users.getUserDetails
   code_General.handlers.users.updateDetails
   code_General.handlers.users.deleteUser


Module Contents
---------------

.. py:data:: logger

.. py:data:: loggerError

.. py:function:: addUserTest(request: rest_framework.request.Request)

   For testing.

   :param request: GET request
   :type request: HTTP GET
   :return: HTTP response
   :rtype: HTTP status



.. py:class:: SReqAddressContent(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: id


   .. py:attribute:: standard


   .. py:attribute:: country


   .. py:attribute:: city


   .. py:attribute:: zipcode


   .. py:attribute:: houseNumber


   .. py:attribute:: street


   .. py:attribute:: company


   .. py:attribute:: lastName


   .. py:attribute:: firstName


   .. py:attribute:: coordinates


.. py:class:: SResStatistics(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: lastLogin


   .. py:attribute:: numberOfLoginsTotal


   .. py:attribute:: locationOfLastLogin


.. py:class:: SReqNotificationsContent(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: event


   .. py:attribute:: email


.. py:class:: SReqProfileClassesForNotifications(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: user


   .. py:attribute:: organization


.. py:class:: SResUserDetails(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: email


   .. py:attribute:: locale


   .. py:attribute:: addresses


   .. py:attribute:: statistics


   .. py:attribute:: notificationSettings


   .. py:attribute:: todos


.. py:class:: SResUserProfile(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: hashedID


   .. py:attribute:: name


   .. py:attribute:: details


   .. py:attribute:: createdWhen


   .. py:attribute:: updatedWhen


   .. py:attribute:: accessedWhen


   .. py:attribute:: organization


   .. py:attribute:: lastSeen


   .. py:attribute:: usertype


.. py:function:: getUserDetails(request: rest_framework.request.Request)

   Return details about user. 

   :param request: GET request
   :type request: HTTP GET
   :return: User details
   :rtype: Json



.. py:class:: SReqChanges(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: displayName


   .. py:attribute:: email


   .. py:attribute:: address


   .. py:attribute:: locale


   .. py:attribute:: notifications


   .. py:attribute:: todos


.. py:class:: SReqDeletions(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: address


.. py:class:: SReqUpdateUser(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: changes


   .. py:attribute:: deletions


.. py:function:: updateDetails(request: rest_framework.request.Request)

   Update user details.

   :param request: PATCH request
   :type request: HTTP PATCH
   :return: HTTP response
   :rtype: HTTP status



.. py:function:: deleteUser(request: rest_framework.request.Request)

   Deletes a user from the database and auth0.

   :param request: DELETE request
   :type request: HTTP DELETE
   :return: HTTP response
   :rtype: HTTP status



