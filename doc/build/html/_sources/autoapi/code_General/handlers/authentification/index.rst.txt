code_General.handlers.authentification
======================================

.. py:module:: code_General.handlers.authentification

.. autoapi-nested-parse::

   Generic Backend

   Silvio Weging 2023

   Contains: Authentification handling using Auth0



Attributes
----------

.. autoapisummary::

   code_General.handlers.authentification.logger
   code_General.handlers.authentification.loggerError


Classes
-------

.. autoapisummary::

   code_General.handlers.authentification.SReqLocale
   code_General.handlers.authentification.SResPermissionsOfUser


Functions
---------

.. autoapisummary::

   code_General.handlers.authentification.createCsrfCookie
   code_General.handlers.authentification.isLoggedIn
   code_General.handlers.authentification.setLocaleOfUser
   code_General.handlers.authentification.provideRightsFile
   code_General.handlers.authentification.loginAsTestUser
   code_General.handlers.authentification.loginUser
   code_General.handlers.authentification.callbackLogin
   code_General.handlers.authentification.getRolesOfUser
   code_General.handlers.authentification.getPermissionsOfUser
   code_General.handlers.authentification.getNewRoleAndPermissionsForUser
   code_General.handlers.authentification.logoutUser


Module Contents
---------------

.. py:data:: logger

.. py:data:: loggerError

.. py:function:: createCsrfCookie(request: rest_framework.request.Request)

   Ensures that the csrf cookie is set correctly.

   :param request: GET request
   :type request: HTTP GET
   :return: Response with cookie
   :rtype: HTTP Response



.. py:function:: isLoggedIn(request: rest_framework.request.Request)

   Check whether the token of a user has expired and a new login is necessary

   :param request: User session token
   :type request: Dictionary
   :return: True if the token is valid or False if not
   :rtype: HttpResponse


.. py:class:: SReqLocale(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: locale


.. py:function:: setLocaleOfUser(request: rest_framework.request.Request)

   Get the preferred language of the user from the frontend

   :param request: Information from the frontend
   :type request: Dictionary-like object (nonmutable)
   :return: Success if language could be saved in session, failed if not
   :rtype: HttpResponse



.. py:function:: provideRightsFile(request: rest_framework.request.Request)

   Returns the json file containing the rights for the frontend

   :param request: GET request
   :type request: HTTP GET
   :return: JSON Response.
   :rtype: JSONResponse



.. py:function:: loginAsTestUser(request: rest_framework.request.Request)

   Use fakeUser, fakeOrganization or fakeAdmin to log in from the swagger interface.

   :param request: GET Request
   :type request: HTTP GET
   :return: Nothing
   :rtype: None



.. py:function:: loginUser(request: rest_framework.request.Request)

   Return a link for redirection to Auth0.

   :param request: GET request
   :type request: HTTP GET
   :return: HTTP Response.
   :rtype: HTTP Link as str



.. py:function:: callbackLogin(request: rest_framework.request.Request)

   TODO: Check if user really is part of an organization or not -> check if misclick at login, and set flags and instances here
   Get information back from Auth0.
   Add user to database if entry doesn't exist.

   :param request: POST request
   :type request: HTTP POST
   :return: URL forwarding with success to frontend/user
   :rtype: HTTP Link as redirect



.. py:function:: getRolesOfUser(request: rest_framework.request.Request)

   Get Roles of User.

   :param request: GET request
   :type request: HTTP GET
   :return: List of roles
   :rtype: JSONResponse


.. py:class:: SResPermissionsOfUser(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: context

      Returns the context as passed to the root serializer on initialization.



   .. py:attribute:: permission


.. py:function:: getPermissionsOfUser(request: rest_framework.request.Request)

   Get Permissions of User.

   :param request: GET request
   :type request: HTTP GET
   :return: List of roles
   :rtype: JSONResponse


.. py:function:: getNewRoleAndPermissionsForUser(request: rest_framework.request.Request)

   In case the role changed, get new role and new permissions from auth0

   :param request: GET request
   :type request: HTTP GET
   :return: If successfull or not
   :rtype: Bool


.. py:function:: logoutUser(request: rest_framework.request.Request)

   Delete session for this user and log out.

   :param request: GET request
   :type request: HTTP GET
   :return: URL to be forwarded
   :rtype: HTTP URL



