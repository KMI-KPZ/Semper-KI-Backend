code_SemperKI.connections.content.postgresql.pgProcesses
========================================================

.. py:module:: code_SemperKI.connections.content.postgresql.pgProcesses

.. autoapi-nested-parse::

   Part of Semper-KI software

   Silvio Weging 2023

   Contains: Services for database calls



Attributes
----------

.. autoapisummary::

   code_SemperKI.connections.content.postgresql.pgProcesses.logger


Classes
-------

.. autoapisummary::

   code_SemperKI.connections.content.postgresql.pgProcesses.ProcessManagementBase


Module Contents
---------------

.. py:data:: logger

.. py:class:: ProcessManagementBase(session)

   Bases: :py:obj:`code_SemperKI.connections.content.abstractInterface.AbstractContentInterface`


   Abstract class with functions that session and postgres interfaces have to comply to



   .. py:attribute:: structuredSessionObj


   .. py:method:: getSession()

      Get the session

      :return: The session
      :rtype: Django session obj(dict)




   .. py:method:: getUserID() -> str

      Retrieve UserID from session

      :return: UserID
      :rtype: str



   .. py:method:: getActualUserID() -> str

      Retrieve the user behind the organization

      :return: UserID
      :rtype: str



   .. py:method:: checkIfUserIsClient(userHashID, projectID='', processID='')
      :staticmethod:


      See if the user is the client of either the project or the process

      :param userHashID: The hashed ID of the user/organization
      :type userHashID: Str
      :param projectID: The ID of the project
      :type projectID: Str
      :param processID: The ID of the process
      :type processID: Str
      :return: True if user is client, false if not
      :rtype: Bool




   .. py:method:: getData(processID, processObject=None)
      :staticmethod:


      Get all data associated with the process (aka history).

      :param processID: process ID for a process
      :type processID: str
      :return: list of all data
      :rtype: list




   .. py:method:: getDataWithContentID(processID, IDofContent)
      :staticmethod:


      Get one datum in particular but use the content ID.

      :param processID: process ID for a process
      :type processID: str
      :param IDofContent: ID for a datum
      :type IDofContent: str
      :return: this datum
      :rtype: dict




   .. py:method:: getDataWithID(IDofData)
      :staticmethod:


      Get one datum in particular.

      :param IDofData: ID for a datum
      :type IDofData: str
      :return: this datum
      :rtype: dict




   .. py:method:: getDataByType(typeOfData: code_SemperKI.definitions.DataType, processID, processObject=None)
      :staticmethod:


      Get all data of a certain type for a process.

      :param processID: process ID for a process
      :type processID: str
      :param typeOfData: type of this data
      :type typeOfData: DataType
      :return: all results
      :rtype: list




   .. py:method:: createDataEntry(data, dataID, processID, typeOfData: code_SemperKI.definitions.DataType, createdBy: str, details={}, IDofData='')
      :staticmethod:


      Create an entry in the Data table

      :param data: The data itself
      :type data: Dict in JSON
      :param dataID: The ID of that date
      :type dataID: Str
      :param processID: process it belongs to
      :type processID: str
      :param typeOfData: The type of this data
      :type typeOfData: DataType
      :param createdBy: Who created it (hashed ID)
      :type createdBy: Str
      :param details: Some metadata
      :type details: JSON Dict
      :param IDofData: If the data has an id, save it
      :type IDofData: Str
      :return: Nothing
      :rtype: None



   .. py:method:: deleteDataEntry(dataID)
      :staticmethod:


      Delete a specific data entry

      :param dataID: The primary key of that datum
      :type dataID: str
      :return: Nothing
      :rtype: None



   .. py:method:: getProcessObj(projectID, processID)
      :staticmethod:


      Get one process.

      :param projectID: The ID of the project, not used here
      :type projectID: str
      :param processID: process ID for a process
      :type processID: str
      :return: Requested process
      :rtype: ProcessObj




   .. py:method:: getProcess(projectID, processID)
      :staticmethod:


      Get one process.

      :param projectID: The ID of the project, not used here
      :type projectID: str
      :param processID: process ID for a process
      :type processID: str
      :return: Process as dict
      :rtype: Dict




   .. py:method:: getProcessDependencies(projectID: str, processID: str) -> tuple[list[code_SemperKI.modelFiles.processModel.Process], list[code_SemperKI.modelFiles.processModel.Process]]
      :staticmethod:


      Return the process dependencies 

      :param projectID: The ID of the project
      :type projectID: str
      :param processID: The ID of the process
      :type processID: str
      :return: Incoming and outgoing dependencies
      :rtype: tuple[list,list]




   .. py:method:: getProjectObj(projectID)
      :staticmethod:


      Get one project object.

      :param projectID: project ID for a project 
      :type projectID: str
      :return: Requested project object
      :rtype: project




   .. py:method:: getProject(projectID)
      :staticmethod:


      Get info about one project.

      :param projectID: ID of the project
      :type projectID: str
      :return: dict with info about that project
      :rtype: dict




   .. py:method:: getProjectForContractor(projectID, contractorHashID)
      :staticmethod:


      Get info about one project for an organization as a contractor.

      :param projectID: ID of the project
      :type projectID: str
      :param contractorHashID: The ID of the contractor
      :type contractorHashID: str
      :return: dict with info about that project
      :rtype: dict




   .. py:method:: checkIfCurrentUserIsContractorOfProcess(processID: str, currentUserHashedID: str)
      :staticmethod:


      Get info if the current User may see the contractors side of the process

      :param processID: ID of the process
      :type processID: str
      :param currentUserHashedID: The ID of the current user
      :type currentUserHashedID: str
      :return: True if the user is the contractor, false if not
      :rtype: Bool




   .. py:method:: getAllUsersOfProject(projectID)
      :staticmethod:


      Get all user IDs that are connected to that project.

      :param projectID: unique project ID
      :type projectID: str
      :return: Set of all user IDs
      :rtype: Set




   .. py:method:: getAllUsersOfProcess(processID)
      :staticmethod:


      Get all user IDs that are connected to that processID.

      :param processID: unique process ID
      :type processID: str
      :return: Set of all user IDs
      :rtype: Set




   .. py:method:: getProjectIDViaProcessID(processID)
      :staticmethod:


      Get Project ID from the Process ID

      :param processID: unique process ID
      :type processID: str
      :return: project ID
      :rtype: str



   .. py:method:: deleteProcess(processID, processObj=None)
      :staticmethod:


      Delete specific process.

      :param processID: unique process ID to be deleted
      :type processID: str
      :return: Flag if it worked or not
      :rtype: Bool




   .. py:method:: deleteProject(projectID)
      :staticmethod:


      Delete specific project.

      :param projectID: unique project ID to be deleted
      :type projectID: str
      :return: Flag if it worked or not
      :rtype: Bool




   .. py:method:: updateProject(projectID, updateType: code_SemperKI.definitions.ProjectUpdates, content)
      :staticmethod:


      Change details of an project like its status. 

      :param projectID: project ID that this project belongs to
      :type projectID: str
      :param updateType: changed project details
      :type updateType: EnumUpdates
      :param content: changed project, can be many stuff
      :type content: json dict
      :return: Flag if it worked or not
      :rtype: Bool




   .. py:method:: updateProcess(projectID, processID, updateType: code_SemperKI.definitions.ProcessUpdates, content, updatedBy) -> tuple[str, dict] | Exception
      :staticmethod:


      Change details of a process like its status, or save communication. 

      :param projectID: The project ID, not necessary here
      :type projectID: str
      :param processID: unique processID to be edited
      :type processID: str
      :param updateType: changed process details
      :type updateType: EnumUpdates
      :param content: changed process, can be many stuff
      :type content: json dict
      :return: The relevant thing that got updated, for event queue
      :rtype: tuple[str,dict]|Exception




   .. py:method:: deleteFromProcess(projectID, processID, updateType: code_SemperKI.definitions.ProcessUpdates, content, deletedBy)
      :staticmethod:


      Delete details of a process like its status, or content. 

      :param projectID: Project that this process belongs to, not needed here
      :type projectID: str
      :param processID: unique process ID to be edited
      :type processID: str
      :param updateType: changed process details
      :type updateType: EnumUpdates
      :param content: deletions
      :type content: json dict
      :return: Flag if it worked or not
      :rtype: Bool




   .. py:method:: getInfoAboutProjectForWebsocket(projectID: str, processID: str, event: str, eventContent, notification: str, clientOnly: bool, creatorOfEvent: str)
      :staticmethod:


      Retrieve information about the users connected to the project from the database. 

      :param projectID: project ID to retrieve data from
      :type projectID: str
      :param processID: The process ID affected
      :type processID: str
      :param event: the event that happens
      :type event: str
      :param eventContent: The content that triggered the event
      :type eventContent: Any
      :param notification: The notification that wants to be send
      :type notification: str
      :return: Dictionary of users with project ID and processes in order for the websocket to fire events
      :rtype: Dict




   .. py:method:: getAllProjectsFlat()
      :staticmethod:


      Return flat list of all projects, for admins

      :return: Json with all projects and their data
      :rtype: List of dicts



   .. py:method:: getProcessesPerPID(projectID)
      :staticmethod:


      Retrieve infos about one project, for admins

      :param projectID: project of interest
      :type projectID: str
      :return: list of all processes of that OC
      :rtype: list



   .. py:method:: checkIfFilesAreRemote(projectID: str, processID: str) -> bool
      :staticmethod:


      If at least one file is remote, say so to trigger upload to remote for new files as well

      :param projectID: The ID of the project that the process is part of
      :type projectID: str
      :param processID: The ID of the process in question
      :type processID: str
      :return: True if remote, false if local
      :rtype: bool




   .. py:method:: createProject(projectID: str, client: str)
      :staticmethod:


      Create the project in the database directly

      :param projectID: The ID of the project
      :type projectID: str
      :param client: the userID of the person creating the project
      :type client: str
      :return: Nothing
      :rtype: None




   .. py:method:: createProcess(projectID: str, processID: str, client: str)
      :staticmethod:


      Create the project in the database directly

      :param projectID: The ID of the project
      :type projectID: str
      :param processID: The ID of the process
      :type processID: str
      :param client: the userID of the person creating the project
      :type client: str
      :return: Nothing
      :rtype: None




   .. py:method:: addProjectToDatabase(session)
      :staticmethod:


      Add project and processes for that user. Check if user already has a project and append if so, create a new process if not.

      :param session: session of user
      :type session: session dict
      :return: Dictionary of users with project id and processes in order for the websocket to fire events
      :rtype: Dict




   .. py:method:: getProjects(session)
      :staticmethod:


      Get all processes for that user.

      :param session: session of that user
      :type session: dict
      :return: sorted list with all processes
      :rtype: list




   .. py:method:: getProjectsFlat(session)
      :staticmethod:


      Get all projects for that user but with limited detail.

      :param session: session of that user
      :type session: dict
      :return: sorted list with projects
      :rtype: list




   .. py:method:: getAllContractors(selectedService: int)
      :staticmethod:


      Get all contractors.

      :return: All contractors
      :rtype: Dictionary




   .. py:method:: verifyProcess(processObj: code_SemperKI.modelFiles.processModel.Process, session, userID: str)
      :staticmethod:


      Verify the process.

      :param projectObj: Process object
      :type projectID: Process
      :param session: Session of this user
      :type session: Django session object
      :return: Nothing
      :rtype: None




   .. py:method:: sendProcess(processObj: code_SemperKI.modelFiles.processModel.Process, session, userID: str)
      :staticmethod:


      Send the process to its contractor(s).

      :param processObj: process that shall be send
      :type processObj: Process
      :param session: Who ordered the verification
      :type session: Django session object (dict-like)
      :param userID: Who ordered the sendaway
      :type userID: str
      :return: Nothing
      :rtype: None




