code_SemperKI.services.service_Assembly.service
===============================================

.. py:module:: code_SemperKI.services.service_Assembly.service

.. autoapi-nested-parse::

   Part of Semper-KI software

   Silvio Weging 2023

   Contains: Class which describes the service in particular



Classes
-------

.. autoapisummary::

   code_SemperKI.services.service_Assembly.service.Assembly


Module Contents
---------------

.. py:class:: Assembly

   Bases: :py:obj:`code_SemperKI.serviceManager.ServiceBase`


   All connections of this service that Semper-KI should know about



   .. py:method:: initializeServiceDetails(serviceDetails: dict) -> None

      Initialize the service




   .. py:method:: updateServiceDetails(existingContent, newContent)

      Run service specific update of service details




   .. py:method:: deleteServiceDetails(existingContent, deletedContent)

      Run service specific update of service details




   .. py:method:: isFileRelevantForService(existingContent, fileID: str) -> bool

      Check if a file is relevant for the service




   .. py:method:: parseServiceDetails(existingContent) -> dict

      Parse the service details for Frontend




   .. py:method:: serviceReady(existingContent) -> tuple[bool, list[str]]

      Checks, if service is completely defined




   .. py:method:: checkIfSelectionIsAvailable(processObj) -> bool

      Checks, if the selection of the service is available (material, ...)




   .. py:method:: cloneServiceDetails(existingContent: dict, newProcess) -> dict

      Clone content of the service

      :param existingContent: What the process currently holds about the service
      :type existingContent: dict
      :param newProcess: The new process as object
      :type newProcess: Process|ProcessInterface
      :return: The copy of the service details
      :rtype: dict




   .. py:method:: calculatePriceForService(process, additionalArguments: dict, transferObject: object) -> dict

      Calculate the price for all content of the service

      :param process: The process with all its details
      :type process: ProcessInterface|Process
      :param additionalArguments: Various parameters, differs for every service
      :type additionalArguments: dict
      :param transferObject: Transfer object with additional information
      :type transferObject: object
      :return: Minimum and maximum price
      :rtype: tuple[float, float]




   .. py:method:: getFilteredContractors(processObj) -> tuple[dict, object]

      Get a list of contractors that can do the job

      :param processObj: The process in question
      :type processObj: ProcessInterface|Process
      :return: List of suitable contractors and a transfer object with additional information, can be used for example to calculate a price based on prior calculations
      :rtype: tuple[list, object]




   .. py:method:: getServiceSpecificContractorDetails(existingDetails: dict, contractor: object) -> dict

      Get the service specific details for a contractor




   .. py:method:: serviceSpecificTasks(session, processObj, validationResults: dict) -> dict | Exception

      Do service specific tasks




