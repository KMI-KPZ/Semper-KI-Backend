code_SemperKI.services.service_AdditiveManufacturing.connections.postgresql.pgKG
================================================================================

.. py:module:: code_SemperKI.services.service_AdditiveManufacturing.connections.postgresql.pgKG

.. autoapi-nested-parse::

   Part of Semper-KI software

   Silvio Weging 2024

   Contains: Am specific database knowledge graph stuff 



Classes
-------

.. autoapisummary::

   code_SemperKI.services.service_AdditiveManufacturing.connections.postgresql.pgKG.LogicAM


Functions
---------

.. autoapisummary::

   code_SemperKI.services.service_AdditiveManufacturing.connections.postgresql.pgKG.getPropertyDefinitionForNodeType


Module Contents
---------------

.. py:function:: getPropertyDefinitionForNodeType(nodeType: str, userLocale: str) -> list[dict]

   For different node types, different properties are important. 
   Retrieve those, especially for the Frontend.

   :param nodeType: The type of the node
   :type nodeType: str
   :return: A list of the properties, defined properly
   :rtype: list[dict] / JSON



.. py:class:: LogicAM

   Bases: :py:obj:`code_SemperKI.connections.content.postgresql.pgKnowledgeGraph.Logic`


   Extending the class for AM usage



   .. py:method:: getViablePrinters(calculatedValues: dict, listOfPrinters: list) -> list[dict]
      :staticmethod:


      Get a list of printers that are viable

      :param calculatedValues: The comparison values
      :type calculatedValues: dict
      :param prefilteredDictOfNodes: A dictionary containing manufacturers and their printers to be filtered further
      :type prefilteredDictOfNodes: dict with manufacturerID as key and printer lists as values
      :return: List of printer nodes
      :rtype: list[dict]




   .. py:method:: getManufacturersWithViablePrinters(calculatedValues: list[float], prefilteredDictOfNodes: dict) -> set
      :staticmethod:


      Check if there are manufacturers who have printers that are sufficient

      :param calculatedValues: The comparison values
      :type calculatedValues: list[float]
      :param prefilteredDictOfNodes: A dictionary containing manufacturers and their printers to be filtered further
      :type prefilteredDictOfNodes: dict with manufacturerID as key and printer lists as values
      :return: set of IDs
      :rtype: set




