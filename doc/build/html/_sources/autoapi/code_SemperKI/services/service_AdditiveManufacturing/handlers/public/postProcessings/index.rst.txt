code_SemperKI.services.service_AdditiveManufacturing.handlers.public.postProcessings
====================================================================================

.. py:module:: code_SemperKI.services.service_AdditiveManufacturing.handlers.public.postProcessings

.. autoapi-nested-parse::

   Part of Semper-KI software

   Silvio Weging 2024

   Contains: Handlers for AM Materials



Attributes
----------

.. autoapisummary::

   code_SemperKI.services.service_AdditiveManufacturing.handlers.public.postProcessings.logger
   code_SemperKI.services.service_AdditiveManufacturing.handlers.public.postProcessings.loggerError


Classes
-------

.. autoapisummary::

   code_SemperKI.services.service_AdditiveManufacturing.handlers.public.postProcessings.SReqPostProcessingsFilter
   code_SemperKI.services.service_AdditiveManufacturing.handlers.public.postProcessings.SReqPostProcessingsContent
   code_SemperKI.services.service_AdditiveManufacturing.handlers.public.postProcessings.SResPostProcessingsWithFilters
   code_SemperKI.services.service_AdditiveManufacturing.handlers.public.postProcessings.SReqSetPostProcessings


Functions
---------

.. autoapisummary::

   code_SemperKI.services.service_AdditiveManufacturing.handlers.public.postProcessings.retrievePostProcessingsWithFilter
   code_SemperKI.services.service_AdditiveManufacturing.handlers.public.postProcessings.setPostProcessingSelection
   code_SemperKI.services.service_AdditiveManufacturing.handlers.public.postProcessings.deletePostProcessingFromSelection


Module Contents
---------------

.. py:data:: logger

.. py:data:: loggerError

.. py:class:: SReqPostProcessingsFilter(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: filters


.. py:class:: SReqPostProcessingsContent(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: id


   .. py:attribute:: title


   .. py:attribute:: checked


   .. py:attribute:: selectedValue


   .. py:attribute:: propList


   .. py:attribute:: type


   .. py:attribute:: imgPath


.. py:class:: SResPostProcessingsWithFilters(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: postProcessings


.. py:function:: retrievePostProcessingsWithFilter(request: rest_framework.request.Request)

   Return all postprocessings conforming to the filter

   :param request: POST Request
   :type request: HTTP POST
   :return: JSON with postprocessings
   :rtype: Response



.. py:class:: SReqSetPostProcessings(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: projectID


   .. py:attribute:: processID


   .. py:attribute:: postProcessings


   .. py:attribute:: groupID


.. py:function:: setPostProcessingSelection(request: rest_framework.request.Request)

   User selected a postprocessing

   :param request: PATCH Request
   :type request: HTTP PATCH
   :return: Success or Exception
   :rtype: HTTP Response



.. py:function:: deletePostProcessingFromSelection(request: rest_framework.request.Request, projectID: str, processID: str, groupID: int, postProcessingID: str)

   Remove a prior selected postProcessing from selection

   :param request: DELETE Request
   :type request: HTTP DELETE
   :param projectID: Project ID
   :type projectID: str
   :param processID: Process ID
   :type processID: str
   :param postProcessingID: ID of the selected postProcessing
   :type postProcessingID: str
   :param groupID: Index of the group
   :type groupID: str
   :return: Success or Exception
   :rtype: HTTP Response



